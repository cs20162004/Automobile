{"cells":[{"metadata":{"_uuid":"d629ff2d2480ee46fbb7e2d37f6b5fab8052498a","_cell_guid":"79c7e3d0-c299-4dcb-8224-4455121ee9b0","trusted":true},"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nX = pd.read_csv(\"../imports-85.csv\", header = None)\ncolumns = {\n    0: 'symboling',\n    1: 'normalized-losses',\n    2: 'make',\n    3: 'fuel-type',\n    4: 'aspiration',\n    5: 'num-of-doors',\n    6: 'body-style',\n    7: 'drive-wheels',\n    8: 'engine-location',\n    9: 'wheel-base',\n    10: 'length',\n    11: 'width',\n    12: 'height',\n    13: 'curb-weight',\n    14: 'engine-type',\n    15: 'num-of-cylinders',\n    16: 'engine-size',\n    17: 'fuel-system',\n    18: 'bore',\n    19: 'stroke',\n    20: 'compression-ratio',\n    21: 'horsepower',\n    22: 'peak-rpm',\n    23: 'city-mpg',\n    24: 'highway-mpg',\n    25: 'price'\n}\nX.rename(columns = columns, inplace = True)","execution_count":19,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"print(X.shape)\nX.head()","execution_count":20,"outputs":[{"output_type":"stream","text":"(205, 26)\n","name":"stdout"},{"output_type":"execute_result","execution_count":20,"data":{"text/plain":"   symboling normalized-losses         make fuel-type aspiration num-of-doors  \\\n0          3                 ?  alfa-romero       gas        std          two   \n1          3                 ?  alfa-romero       gas        std          two   \n2          1                 ?  alfa-romero       gas        std          two   \n3          2               164         audi       gas        std         four   \n4          2               164         audi       gas        std         four   \n\n    body-style drive-wheels engine-location  wheel-base  ...  engine-size  \\\n0  convertible          rwd           front        88.6  ...          130   \n1  convertible          rwd           front        88.6  ...          130   \n2    hatchback          rwd           front        94.5  ...          152   \n3        sedan          fwd           front        99.8  ...          109   \n4        sedan          4wd           front        99.4  ...          136   \n\n   fuel-system  bore  stroke compression-ratio horsepower  peak-rpm city-mpg  \\\n0         mpfi  3.47    2.68               9.0        111      5000       21   \n1         mpfi  3.47    2.68               9.0        111      5000       21   \n2         mpfi  2.68    3.47               9.0        154      5000       19   \n3         mpfi  3.19    3.40              10.0        102      5500       24   \n4         mpfi  3.19    3.40               8.0        115      5500       18   \n\n  highway-mpg  price  \n0          27  13495  \n1          27  16500  \n2          26  16500  \n3          30  13950  \n4          22  17450  \n\n[5 rows x 26 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>symboling</th>\n      <th>normalized-losses</th>\n      <th>make</th>\n      <th>fuel-type</th>\n      <th>aspiration</th>\n      <th>num-of-doors</th>\n      <th>body-style</th>\n      <th>drive-wheels</th>\n      <th>engine-location</th>\n      <th>wheel-base</th>\n      <th>...</th>\n      <th>engine-size</th>\n      <th>fuel-system</th>\n      <th>bore</th>\n      <th>stroke</th>\n      <th>compression-ratio</th>\n      <th>horsepower</th>\n      <th>peak-rpm</th>\n      <th>city-mpg</th>\n      <th>highway-mpg</th>\n      <th>price</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>3</td>\n      <td>?</td>\n      <td>alfa-romero</td>\n      <td>gas</td>\n      <td>std</td>\n      <td>two</td>\n      <td>convertible</td>\n      <td>rwd</td>\n      <td>front</td>\n      <td>88.6</td>\n      <td>...</td>\n      <td>130</td>\n      <td>mpfi</td>\n      <td>3.47</td>\n      <td>2.68</td>\n      <td>9.0</td>\n      <td>111</td>\n      <td>5000</td>\n      <td>21</td>\n      <td>27</td>\n      <td>13495</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>3</td>\n      <td>?</td>\n      <td>alfa-romero</td>\n      <td>gas</td>\n      <td>std</td>\n      <td>two</td>\n      <td>convertible</td>\n      <td>rwd</td>\n      <td>front</td>\n      <td>88.6</td>\n      <td>...</td>\n      <td>130</td>\n      <td>mpfi</td>\n      <td>3.47</td>\n      <td>2.68</td>\n      <td>9.0</td>\n      <td>111</td>\n      <td>5000</td>\n      <td>21</td>\n      <td>27</td>\n      <td>16500</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>?</td>\n      <td>alfa-romero</td>\n      <td>gas</td>\n      <td>std</td>\n      <td>two</td>\n      <td>hatchback</td>\n      <td>rwd</td>\n      <td>front</td>\n      <td>94.5</td>\n      <td>...</td>\n      <td>152</td>\n      <td>mpfi</td>\n      <td>2.68</td>\n      <td>3.47</td>\n      <td>9.0</td>\n      <td>154</td>\n      <td>5000</td>\n      <td>19</td>\n      <td>26</td>\n      <td>16500</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2</td>\n      <td>164</td>\n      <td>audi</td>\n      <td>gas</td>\n      <td>std</td>\n      <td>four</td>\n      <td>sedan</td>\n      <td>fwd</td>\n      <td>front</td>\n      <td>99.8</td>\n      <td>...</td>\n      <td>109</td>\n      <td>mpfi</td>\n      <td>3.19</td>\n      <td>3.40</td>\n      <td>10.0</td>\n      <td>102</td>\n      <td>5500</td>\n      <td>24</td>\n      <td>30</td>\n      <td>13950</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2</td>\n      <td>164</td>\n      <td>audi</td>\n      <td>gas</td>\n      <td>std</td>\n      <td>four</td>\n      <td>sedan</td>\n      <td>4wd</td>\n      <td>front</td>\n      <td>99.4</td>\n      <td>...</td>\n      <td>136</td>\n      <td>mpfi</td>\n      <td>3.19</td>\n      <td>3.40</td>\n      <td>8.0</td>\n      <td>115</td>\n      <td>5500</td>\n      <td>18</td>\n      <td>22</td>\n      <td>17450</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows Ã— 26 columns</p>\n</div>"},"metadata":{}}]},{"metadata":{"trusted":true},"cell_type":"code","source":"X = X[X['normalized-losses'] != '?']     #Skip samples with missing values in the target 'normalized_losses'\nprint(X.shape)","execution_count":21,"outputs":[{"output_type":"stream","text":"(164, 26)\n","name":"stdout"}]},{"metadata":{"trusted":true},"cell_type":"code","source":"X.drop('symboling', axis = 1, inplace = True)     # drop 'symboling' column\n\nX.replace('?', np.nan, inplace = True)            # replace missing values with np.nan\n\nX.isnull().sum()       # check for number of missing values in the data","execution_count":22,"outputs":[{"output_type":"execute_result","execution_count":22,"data":{"text/plain":"normalized-losses    0\nmake                 0\nfuel-type            0\naspiration           0\nnum-of-doors         1\nbody-style           0\ndrive-wheels         0\nengine-location      0\nwheel-base           0\nlength               0\nwidth                0\nheight               0\ncurb-weight          0\nengine-type          0\nnum-of-cylinders     0\nengine-size          0\nfuel-system          0\nbore                 4\nstroke               4\ncompression-ratio    0\nhorsepower           0\npeak-rpm             0\ncity-mpg             0\nhighway-mpg          0\nprice                0\ndtype: int64"},"metadata":{}}]},{"metadata":{"trusted":true},"cell_type":"code","source":"# Convert columns with 'int' or 'float' values, having object dtype, back to int and float dtype\n\nX['normalized-losses'] = X['normalized-losses'].astype(str).astype(int)\nX['bore'] = X['bore'].astype(str).astype(float)\nX['stroke'] = X['stroke'].astype(str).astype(float)\nX['horsepower'] = X['horsepower'].astype(str).astype(int)\nX['peak-rpm'] = X['peak-rpm'].astype(str).astype(int)\nX['price'] = X['price'].astype(str).astype(int)\n\nX['num-of-doors'] = X['num-of-doors'].map({'two' : 2, 'four' : 4})\n\nX.dtypes","execution_count":23,"outputs":[{"output_type":"execute_result","execution_count":23,"data":{"text/plain":"normalized-losses      int64\nmake                  object\nfuel-type             object\naspiration            object\nnum-of-doors         float64\nbody-style            object\ndrive-wheels          object\nengine-location       object\nwheel-base           float64\nlength               float64\nwidth                float64\nheight               float64\ncurb-weight            int64\nengine-type           object\nnum-of-cylinders      object\nengine-size            int64\nfuel-system           object\nbore                 float64\nstroke               float64\ncompression-ratio    float64\nhorsepower             int64\npeak-rpm               int64\ncity-mpg               int64\nhighway-mpg            int64\nprice                  int64\ndtype: object"},"metadata":{}}]},{"metadata":{"trusted":true},"cell_type":"code","source":"#X['bore'].fillna(X['bore'].mean(), inplace = True)\n#X['stroke'].fillna(X['stroke'].mean(), inplace = True)\nX = X.fillna(X.mode().iloc[0])     #Fill missing values with the most frequent value of that column","execution_count":24,"outputs":[]},{"metadata":{},"cell_type":"markdown","source":"# Encode categorical variables into numerical"},{"metadata":{"trusted":true},"cell_type":"code","source":"X.nunique()","execution_count":25,"outputs":[{"output_type":"execute_result","execution_count":25,"data":{"text/plain":"normalized-losses     51\nmake                  18\nfuel-type              2\naspiration             2\nnum-of-doors           2\nbody-style             5\ndrive-wheels           3\nengine-location        1\nwheel-base            41\nlength                57\nwidth                 34\nheight                40\ncurb-weight          138\nengine-type            6\nnum-of-cylinders       6\nengine-size           34\nfuel-system            7\nbore                  33\nstroke                31\ncompression-ratio     29\nhorsepower            49\npeak-rpm              20\ncity-mpg              25\nhighway-mpg           28\nprice                150\ndtype: int64"},"metadata":{}}]},{"metadata":{"trusted":true},"cell_type":"code","source":"encode_cols = ['make']\none_hot_cols = ['fuel-type', 'aspiration', 'body-style', 'drive-wheels', 'engine-location', 'engine-type', 'num-of-cylinders', 'fuel-system']","execution_count":26,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"from sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import OneHotEncoder\n\nlabel_encoder = LabelEncoder()\nOne_encoder = OneHotEncoder(handle_unknown='ignore', sparse = False)\n\nlabel_X = X.copy()\n\nfor cols in encode_cols:\n    label_X[cols] = label_encoder.fit_transform(X[cols])\n    \nOH_cols = pd.DataFrame(One_encoder.fit_transform(label_X[one_hot_cols]))\nOH_cols.index = label_X.index\nOH_X = label_X.drop(one_hot_cols, axis = 1)\n\nnum_X = pd.concat([OH_X, OH_cols], axis = 1)","execution_count":27,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"plt.scatter(num_X['price'], num_X['normalized-losses'], color = 'green')\nplt.xlabel('price')\nplt.ylabel('normalized_losses')\nplt.show()","execution_count":28,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 432x288 with 1 Axes>","image/png":"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\n"},"metadata":{"needs_background":"light"}}]},{"metadata":{},"cell_type":"markdown","source":"Split the data into training and testing datas"},{"metadata":{"trusted":true},"cell_type":"code","source":"from sklearn.model_selection import train_test_split\n\ntrain, test = train_test_split(num_X, test_size = 0.2)","execution_count":29,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"train_y = train['normalized-losses']\ntrain_x = train.drop('normalized-losses', axis = 1)\n\ntest_y = test['normalized-losses']\ntest_x = test.drop('normalized-losses', axis = 1)","execution_count":30,"outputs":[]},{"metadata":{},"cell_type":"markdown","source":"# Modelling using *LinearRegression* model from *sklearn*"},{"metadata":{"trusted":true},"cell_type":"code","source":"from sklearn.linear_model import LinearRegression\n\nmodel = LinearRegression()\n\nmodel.fit(train_x, train_y)","execution_count":31,"outputs":[{"output_type":"execute_result","execution_count":31,"data":{"text/plain":"LinearRegression(copy_X=True, fit_intercept=True, n_jobs=None, normalize=False)"},"metadata":{}}]},{"metadata":{},"cell_type":"markdown","source":"**Evaluation**\n\nCalculating model's accuracy using MSE (Mean Squared Error) metric"},{"metadata":{"trusted":true},"cell_type":"code","source":"from sklearn import metrics\n\ny_pred = model.predict(test_x)\n\nprint(metrics.mean_squared_error(test_y, y_pred))","execution_count":32,"outputs":[{"output_type":"stream","text":"626.0111925387159\n","name":"stdout"}]},{"metadata":{"trusted":true},"cell_type":"code","source":"x_pred = model.predict(train_x.sort_values('price'))\nplt.scatter(train_x['price'], train_y, color = 'blue')\nplt.plot(train_x.sort_values('price'), x_pred)\nplt.show()","execution_count":33,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 432x288 with 1 Axes>","image/png":"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\n"},"metadata":{"needs_background":"light"}}]},{"metadata":{},"cell_type":"markdown","source":"# RandomForestRegressor"},{"metadata":{"trusted":true},"cell_type":"code","source":"from sklearn.ensemble import RandomForestRegressor\n\nmodel1 = RandomForestRegressor(n_estimators=100, random_state=0)\nmodel1.fit(train_x, train_y)\npreds = model1.predict(test_x)\nprint(metrics.mean_squared_error(test_y, preds))","execution_count":34,"outputs":[{"output_type":"stream","text":"356.63961515151516\n","name":"stdout"}]},{"metadata":{"trusted":true},"cell_type":"code","source":"","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"","execution_count":null,"outputs":[]}],"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"pygments_lexer":"ipython3","nbconvert_exporter":"python","version":"3.6.4","file_extension":".py","codemirror_mode":{"name":"ipython","version":3},"name":"python","mimetype":"text/x-python"}},"nbformat":4,"nbformat_minor":4}
